[{"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/index.js":"1","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/reportWebVitals.js":"2","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/App.js":"3","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/FileUpload.js":"4","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Feedback.js":"5","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/header.js":"6","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Modal.js":"7","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Display.js":"8","/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/dise.js":"9","/Users/tiryagishprayad/Pictures/finalproject/web5/src/index.js":"10","/Users/tiryagishprayad/Pictures/finalproject/web5/src/App.js":"11","/Users/tiryagishprayad/Pictures/finalproject/web5/src/reportWebVitals.js":"12","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/header.js":"13","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/FileUpload.js":"14","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/dise.js":"15","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Feedback.js":"16","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Modal.js":"17","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js":"18","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/useAddressInput.js":"19"},{"size":535,"mtime":1684611387548,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1684611387548,"results":"22","hashOfConfig":"21"},{"size":6137,"mtime":1695304234167,"results":"23","hashOfConfig":"21"},{"size":2328,"mtime":1695228260511,"results":"24","hashOfConfig":"21"},{"size":4504,"mtime":1694595757379,"results":"25","hashOfConfig":"21"},{"size":4442,"mtime":1695066933442,"results":"26","hashOfConfig":"21"},{"size":1700,"mtime":1688200220027,"results":"27","hashOfConfig":"21"},{"size":2815,"mtime":1695304116210,"results":"28","hashOfConfig":"21"},{"size":4595,"mtime":1695217732921,"results":"29","hashOfConfig":"21"},{"size":535,"mtime":1684611387548,"results":"30","hashOfConfig":"31"},{"size":4562,"mtime":1711613415941,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1684611387548,"results":"33","hashOfConfig":"31"},{"size":3146,"mtime":1695364823561,"results":"34","hashOfConfig":"31"},{"size":2659,"mtime":1705673958441,"results":"35","hashOfConfig":"31"},{"size":4593,"mtime":1696491109518,"results":"36","hashOfConfig":"31"},{"size":7258,"mtime":1708247267487,"results":"37","hashOfConfig":"31"},{"size":2042,"mtime":1708235211649,"results":"38","hashOfConfig":"31"},{"size":3062,"mtime":1711613470765,"results":"39","hashOfConfig":"31"},{"size":2535,"mtime":1708237114860,"results":"40","hashOfConfig":"31"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1offc89",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jijr3h",{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/index.js",[],[],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/reportWebVitals.js",[],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/App.js",["103","104","105","106","107","108","109"],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/FileUpload.js",[],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Feedback.js",["110"],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/header.js",["111","112","113","114"],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Modal.js",[],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Display.js",["115"],[],"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/dise.js",[],[],"/Users/tiryagishprayad/Pictures/finalproject/web5/src/index.js",[],[],"/Users/tiryagishprayad/Pictures/finalproject/web5/src/App.js",[],[],"/Users/tiryagishprayad/Pictures/finalproject/web5/src/reportWebVitals.js",[],[],"/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/header.js",[],[],"/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/FileUpload.js",[],[],"/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/dise.js",["116"],[],"import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction DiseasePredictor({ contract, account }) {\n  const [selectedSymptoms, setSelectedSymptoms] = useState(['', '', '', '', '']);\n  const [results, setResults] = useState({\n    decision_tree: '',\n    random_forest: '',\n    naive_bayes: '',\n  });\n\n  const l1 = ['back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine',\n  'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach',\n  'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation',\n  'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs',\n  'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool',\n  'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs',\n  'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails',\n  'swollen_extremities', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips',\n  'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints',\n  'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness',\n  'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine',\n  'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)',\n  'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain',\n  'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria',\n  'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances',\n  'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding',\n  'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload', 'blood_in_sputum',\n  'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads',\n  'scurrying', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails',\n  'blister', 'red_sore_around_nose', 'yellow_crust_ooze'\n\n  ];\n\n\n  // Function to handle symptom selection\n  const handleSymptomChange = (event, index) => {\n    const newSelectedSymptoms = [...selectedSymptoms];\n    newSelectedSymptoms[index] = event.target.value;\n    setSelectedSymptoms(newSelectedSymptoms);\n  };\n\n  const predictDisease = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/predict', { symptoms: selectedSymptoms });\n\n      if (response.status === 200) {\n        const data = response.data;\n        setResults(data);\n\n        await storeDiseasePredictionsInContract(data);\n      } else {\n        console.error('Network response was not ok');\n        setResults({\n          decision_tree: 'error',\n          random_forest: 'error',\n          naive_bayes: 'error',\n        });\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setResults({\n        decision_tree: 'error',\n        random_forest: 'error',\n        naive_bayes: 'error',\n      });\n    }\n  };\n\n  const storeDiseasePredictionsInContract = async (predictions) => {\n    try {\n      const tx = await contract.setDiseasePredictions(\n        predictions.decision_tree_disease,\n        predictions.random_forest_disease,\n        predictions.naive_bayes_disease\n      );\n      console.log('Transaction Hash:', tx.hash);\n      await tx.wait();\n      console.log('Disease predictions stored on the smart contract');\n    } catch (error) {\n      console.error('Error storing disease predictions:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Disease Predictor</h1>\n      <label>Select Symptoms:</label>\n      <br />\n      {selectedSymptoms.map((selectedSymptom, index) => (\n        <select key={`${selectedSymptom}-${index}`} onChange={(e) => handleSymptomChange(e, index)} value={selectedSymptom}>\n          <option value=\"\">Select Symptom</option>\n          {l1.map((symptom, symptomIndex) => (\n            <option key={`${symptom}-${symptomIndex}`} value={symptom}>\n              {symptom}\n            </option>\n          ))}\n        </select>\n      ))}\n\n      <br />\n      <button onClick={predictDisease}>Submit</button>\n      {/* <p>\n        Decision Tree: {results.decision_tree_disease}\n        <br />\n        Random Forest: {results.random_forest_disease}\n        <br />\n        Naive Bayes: {results.naive_bayes_disease}\n      </p> */}\n    </div>\n  );\n}\n\nexport default DiseasePredictor;","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Feedback.js",["117","118"],["119"],"import React, { useState, useEffect } from \"react\";\nimport \"./Feedback.css\";\n\nconst Feedback = ({ contract, account, userName }) => {\n  const [uploadedRecords, setUploadedRecords] = useState([]);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n  const [feedback, setFeedback] = useState(\"\");\n  const [submittedFeedback, setSubmittedFeedback] = useState([]);\n  const [nameAddressMap, setNameAddressMap] = useState({});\n  const [query, setQuery] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showSuggestions, setShowSuggestions] = useState(true);\n  \n  const handleInputChange = (event) => {\n    const userInput = event.target.value;\n    setQuery(userInput);\n    setShowSuggestions(userInput !== '');\n    const filteredOptions = Object.keys(nameAddressMap).filter(\n      (address) =>\n        nameAddressMap[address].toLowerCase().includes(userInput.toLowerCase())\n    );\n    setSuggestions(filteredOptions);\n    setSelectedOption(null);\n  };\n  \n  const handleOptionClick = (option) => {\n    setQuery(option);\n    setSuggestions([]);\n    setSelectedOption(option);\n    setShowSuggestions(false);\n  };\n\n  useEffect(() => {\n    const fetchNames = async () => {\n      const addressList = [\n        \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n        \"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\n        \"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\",\n        \"0x90F79bf6EB2c4f870365E785982E1f101E93b906\",\n        \"0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65\",\n        \"0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc\",\n        \"0x976EA74026E726554dB657fA54763abd0C3a0aa9\",\n        \"0x14dC79964da2C08b23698B3D3cc7Ca32193d9955\",\n        \"0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f\",\n        \"0xa0Ee7A142d267C1f36714E4a8F75612F20a79720\",\n        \"0xBcd4042DE499D14e55001CcbB24a551F3b954096\",\n        \"0x71bE63f3384f5fb98995898A86B02Fb2426c5788\",\n        \"0xFABB0ac9d68B0B445fB7357272Ff202C5651694a\",\n        \"0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec\",\n        \"0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097\",\n        \"0xcd3B766CCDd6AE721141F452C550Ca635964ce71\",\n        \"0x2546BcD3c84621e976D8185a91A922aE77ECEc30\",\n        \"0xbDA5747bFD65F08deb54cb465eB87D40e51B197E\",\n        \"0xdD2FD4581271e230360230F9337D5c0430Bf44C0\",\n        \"0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199\",\n      ];\n      const map = {};\n      for (const address of addressList) {\n        // console.log(\"Fetching name for address:\", address);\n        const name = await contract.getName(address);\n        if (name) {\n          map[address] = name;\n          // console.log(\"Name found for address:\", address, \"Name:\", name);\n        }\n      }\n      setNameAddressMap(map);\n      console.log(\"Name-Address Map:\", map);\n    };\n    contract && fetchNames();\n  }, [contract]);\n  \n\n  const fetchUploadedRecords = async () => {\n    try {\n      let records;\n      if (query) {\n        records = await contract.display(query);\n      } else {\n        records = await contract.display(account);\n      }\n      setUploadedRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching uploaded records:\", error);\n    }\n  };\n\n  const fetchFeedback = async () => {\n    try {\n      const feedbackCount = await contract.getFeedbackCount();\n      const feedbackData = [];\n      for (let i = 0; i < feedbackCount; i++) {\n        const [user, record, feedback, username] = await contract.getFeedback(i);\n        feedbackData.push({ user, record, feedback, username });\n      }\n      setSubmittedFeedback(feedbackData);\n    } catch (error) {\n      console.error(\"Error fetching feedback data:\", error);\n    }\n  };\n\n  const handleRecordClick = (record) => {\n    setSelectedRecord(record);\n  };\n\n  const handleFeedbackChange = (e) => {\n    setFeedback(e.target.value);\n  };\n\n  const submitFeedback = async () => {\n    try {\n      await contract.provideFeedback(selectedRecord, feedback, userName);\n      setFeedback(\"\");\n      setSubmittedFeedback((prevFeedback) => [\n        ...prevFeedback,\n        {\n          user: account, \n          username: userName, \n          record: selectedRecord,\n          feedback: feedback,\n        },\n      ]);\n    } catch (error) {\n      console.error(\"Error submitting feedback:\", error);\n    }\n  };\n\n  const subscribeToFeedbackEvents = () => {\n    if (contract) {\n      contract.on(\"FeedbackProvided\", (record, feedback, username) => {\n        handleFeedbackProvided(record, feedback, username);\n      });\n    }\n  };\n\n  const handleFeedbackProvided = async (record, feedback, username) => {\n    setSubmittedFeedback((prevFeedback) => [\n      ...prevFeedback,\n      {\n        user: account, \n        username, \n        record,\n        feedback,\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    fetchUploadedRecords();\n    subscribeToFeedbackEvents();\n    fetchFeedback();\n\n    return () => {\n      if (contract) {\n        contract.off(\"FeedbackProvided\", handleFeedbackProvided);\n      }\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps  \n  }, [contract, query]);\n\n \n  const handleSelectRecord = (record) => {\n    setSelectedRecord(record);\n  };\n\n  const handleInputSubmit = () => {\n    fetchUploadedRecords();\n  };\n\n  return (\n    <div>\n      <h2>Health Record Feedback</h2>\n      <div className=\"body\">\n       \n        <input\n          type=\"text\"\n          className=\"address\"\n          value={query}\n          onChange={handleInputChange}\n          placeholder=\"Enter Account Name\"\n        />\n        {query && (\n          <ul className={`suggestions-list ${showSuggestions ? '' : 'hidden'}`}>\n            {suggestions.map((option, index) => (\n              <li key={index} onClick={() => handleOptionClick(option)}>\n                {option}\n              </li>\n            ))}\n          </ul>\n        )}\n        <button onClick={handleInputSubmit} className=\"submit-button\">Submit</button>\n      </div>\n      <div className=\"record-list\">\n        {uploadedRecords.map((record, index) => (\n          <div key={index} className=\"record\">\n            <a href={record} target=\"_blank\" rel=\"noopener noreferrer\">\n              {record}\n            </a>\n            <button onClick={() => handleSelectRecord(record)}>Select</button>\n          </div>\n        ))}\n      </div>\n      {selectedRecord && (\n        <div className=\"feedback-section\">\n          <h3>Record: {selectedRecord}</h3>\n          <div>\n            <textarea\n              value={feedback}\n              onChange={handleFeedbackChange}\n              placeholder=\"Enter your feedback\"\n            />\n            <button onClick={submitFeedback}>Submit Feedback</button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"feedback-list\">\n        <h3>Feedback</h3>\n        {submittedFeedback.length > 0 ? (\n          submittedFeedback.map((feedback, index) => (\n            <div key={index} className=\"feedback-item\">\n              <p>Address: {feedback.user}</p>\n              <p>Name: {feedback.username}</p>\n              <p> Patient Record: {feedback.record}</p>\n              <p> Feedback: {feedback.feedback}</p>\n            </div>\n          ))\n        ) : (\n          <p>No feedback submitted.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Feedback;\n","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Modal.js",["120"],[],"import React from 'react';\nimport useAddressInput from './useAddressInput';\nimport './Modal.css';\n\nconst Modal = ({ setModalOpen, contract }) => {\n  const { query, handleInputChange, suggestions, selectedOption, handleOptionClick } = useAddressInput(contract);\n\n  const sharing = async () => {\n    const address = document.querySelector('.account-number-input').value;\n    await contract.allow(address);\n    setModalOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"modalBackground\">\n        <div className=\"modalContainer\">\n          <div className=\"title titleCloseBtn\">\n            <span>Paste The Address</span>\n            <button onClick={() => setModalOpen(false)}>X</button>\n          </div>\n          <div className=\"body\">\n            {/* Input for account numbers */}\n            <input\n              type=\"text\"\n              className=\"account-number-input\"\n              value={query}\n              onChange={handleInputChange}\n              placeholder=\"Enter Account Name\"\n            />\n            {/* Display account number suggestions */}\n            {query && (\n              <ul className=\"suggestions-list\">\n                {suggestions.map((option, index) => (\n                  <li key={index} onClick={() => handleOptionClick(option)}>\n                    {option}\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <form id=\"myForm\">\n            {/* List box for people with access */}\n            <select id=\"selectNumber\">\n              <option className=\"address\">People With Access</option>\n            </select>\n          </form>\n          <div className=\"footer\">\n            <button\n              onClick={() => setModalOpen(false)}\n              id=\"cancelBtn\"\n              className=\"button\"\n            >\n              Cancel\n            </button>\n            <button onClick={() => sharing()} className=\"button\">\n              Share\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Modal;\n","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js",["121"],[],"import { useState, useEffect } from \"react\";\nimport \"./Display.css\";\nimport useAddressInput from './useAddressInput';\n\nconst Display = ({ contract, account }) => {\n  const [data, setData] = useState(\"\");\n  const { query, handleInputChange, suggestions, handleOptionClick } = useAddressInput(contract);\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\",\n  });\n\n  const fetchData = async (query) => {\n    try {\n      const dataArray = await contract.display(query || account);\n      const isEmpty = dataArray.length === 0;\n\n      if (!isEmpty) {\n        const str = dataArray.join(\",\");\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return (\n            <a href={item} key={i} target=\"_blank\" rel=\"noreferrer\">\n              <img\n                key={i}\n                src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n                alt=\"Patient Health Record\"\n                className=\"image-list\"\n              ></img>\n            </a>\n          );\n        });\n\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n\n  const getDiseasePredictions = async (query) => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(query || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes,\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   if (query) {\n  //     fetchData(query);\n  //     getDiseasePredictions(query);\n  //   }\n  // }, [query]);\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        className=\"account-dropdown\"\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Enter Account Name\"\n      />\n      {/* Display account number suggestions */}\n      {query && (\n        <ul className=\"suggestions-list\">\n          {suggestions.map((option, index) => (\n            <li key={index} onClick={() => handleOptionClick(option)}>\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n      <br />\n      <br />\n      <button className=\"center button\" onClick={() => fetchData(query)}>\n        Get Patient Record\n      </button>\n      <button className=\"center button\" onClick={() => getDiseasePredictions(query)}>\n        Get Disease Predictions\n      </button>\n\n      <div className=\"image-list\">{data}</div>\n      {/* Display disease predictions */}\n      <div className=\"disease-predictions\">\n        <h2>Disease Predictions</h2>\n        <p>Decision Tree: {diseasePredictions.decision_tree}</p>\n        <p>Random Forest: {diseasePredictions.random_forest}</p>\n        <p>Naive Bayes: {diseasePredictions.naive_bayes}</p>\n        \n      </div>\n    </>\n  );\n};\n\nexport default Display;\n","/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/useAddressInput.js",[],[],{"ruleId":"122","severity":1,"message":"123","line":10,"column":8,"nodeType":"124","messageId":"125","endLine":10,"endColumn":13},{"ruleId":"122","severity":1,"message":"126","line":21,"column":10,"nodeType":"124","messageId":"125","endLine":21,"endColumn":16},{"ruleId":"122","severity":1,"message":"127","line":21,"column":18,"nodeType":"124","messageId":"125","endLine":21,"endColumn":27},{"ruleId":"122","severity":1,"message":"128","line":22,"column":10,"nodeType":"124","messageId":"125","endLine":22,"endColumn":16},{"ruleId":"122","severity":1,"message":"129","line":22,"column":18,"nodeType":"124","messageId":"125","endLine":22,"endColumn":27},{"ruleId":"122","severity":1,"message":"130","line":23,"column":10,"nodeType":"124","messageId":"125","endLine":23,"endColumn":26},{"ruleId":"122","severity":1,"message":"131","line":23,"column":28,"nodeType":"124","messageId":"125","endLine":23,"endColumn":47},{"ruleId":"132","severity":1,"message":"133","line":94,"column":6,"nodeType":"134","endLine":94,"endColumn":30,"suggestions":"135"},{"ruleId":"122","severity":1,"message":"130","line":11,"column":10,"nodeType":"124","messageId":"125","endLine":11,"endColumn":26},{"ruleId":"122","severity":1,"message":"127","line":12,"column":18,"nodeType":"124","messageId":"125","endLine":12,"endColumn":27},{"ruleId":"122","severity":1,"message":"129","line":13,"column":18,"nodeType":"124","messageId":"125","endLine":13,"endColumn":27},{"ruleId":"122","severity":1,"message":"136","line":79,"column":9,"nodeType":"124","messageId":"125","endLine":79,"endColumn":21},{"ruleId":"132","severity":1,"message":"137","line":60,"column":6,"nodeType":"134","endLine":60,"endColumn":15,"suggestions":"138"},{"ruleId":"122","severity":1,"message":"139","line":6,"column":10,"nodeType":"124","messageId":"125","endLine":6,"endColumn":17},{"ruleId":"122","severity":1,"message":"140","line":12,"column":10,"nodeType":"124","messageId":"125","endLine":12,"endColumn":24},{"ruleId":"122","severity":1,"message":"141","line":102,"column":9,"nodeType":"124","messageId":"125","endLine":102,"endColumn":26},{"ruleId":"132","severity":1,"message":"133","line":159,"column":6,"nodeType":"134","endLine":159,"endColumn":23,"suggestions":"142","suppressions":"143"},{"ruleId":"122","severity":1,"message":"140","line":6,"column":50,"nodeType":"124","messageId":"125","endLine":6,"endColumn":64},{"ruleId":"122","severity":1,"message":"144","line":1,"column":20,"nodeType":"124","messageId":"125","endLine":1,"endColumn":29},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'inputA' is assigned a value but never used.","'setInputA' is assigned a value but never used.","'inputB' is assigned a value but never used.","'setInputB' is assigned a value but never used.","'resultFromPython' is assigned a value but never used.","'setResultFromPython' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchFeedback', 'fetchUploadedRecords', 'handleFeedbackProvided', and 'subscribeToFeedbackEvents'. Either include them or remove the dependency array.","ArrayExpression",["145"],"'handleSubmit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDiseasePredictions'. Either include it or remove the dependency array.",["146"],"'results' is assigned a value but never used.","'selectedOption' is assigned a value but never used.","'handleRecordClick' is assigned a value but never used.",["147"],["148"],"'useEffect' is defined but never used.",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"kind":"155","justification":"156"},"Update the dependencies array to be: [contract, fetchFeedback, fetchUploadedRecords, handleFeedbackProvided, inputAddress, subscribeToFeedbackEvents]",{"range":"157","text":"158"},"Update the dependencies array to be: [account, getDiseasePredictions]",{"range":"159","text":"160"},"Update the dependencies array to be: [contract, fetchFeedback, fetchUploadedRecords, handleFeedbackProvided, query, subscribeToFeedbackEvents]",{"range":"161","text":"162"},"directive","",[2566,2590],"[contract, fetchFeedback, fetchUploadedRecords, handleFeedbackProvided, inputAddress, subscribeToFeedbackEvents]",[1812,1821],"[account, getDiseasePredictions]",[5051,5068],"[contract, fetchFeedback, fetchUploadedRecords, handleFeedbackProvided, query, subscribeToFeedbackEvents]"]