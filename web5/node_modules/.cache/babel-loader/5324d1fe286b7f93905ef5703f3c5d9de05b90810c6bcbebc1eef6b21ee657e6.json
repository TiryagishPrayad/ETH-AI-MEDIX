{"ast":null,"code":"var _jsxFileName = \"/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Display.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState(\"\");\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\"\n  });\n  const fetchData = async address => {\n    try {\n      const dataArray = await contract.display(address || account);\n      const isEmpty = Object.keys(dataArray).length === 0;\n      if (!isEmpty) {\n        const str = dataArray.toString();\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"a\", {\n            href: item,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`,\n              alt: \"Patient Health Record\",\n              className: \"image-list\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"record-text\",\n              children: \"Patient Health Record\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this);\n        });\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n  const getDiseasePredictions = async address => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(address || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n  useEffect(() => {\n    getDiseasePredictsions(); // Fetch disease predictions when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: () => fetchData(document.querySelector(\".address\").value),\n      children: \"Get Patient Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"disease-predictions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Disease Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Decision Tree: \", diseasePredictions.decision_tree]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Random Forest: \", diseasePredictions.random_forest]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Naive Bayes: \", diseasePredictions.naive_bayes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"/G2IImpL1L42TsSPT4KFt7vxzWY=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","diseasePredictions","setDiseasePredictions","decision_tree","random_forest","naive_bayes","fetchData","address","dataArray","display","isEmpty","Object","keys","length","str","toString","str_array","split","images","map","item","i","href","target","rel","children","src","substring","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","alert","error","console","message","getDiseasePredictions","getDiseasePredictsions","type","placeholder","onClick","document","querySelector","value","_c","$RefreshReg$"],"sources":["/Users/tiryagishprayad/Pictures/dis3.2/web4/src/components/Display.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n  const [diseasePredictions, setDiseasePredictions] = useState({\r\n    decision_tree: \"\",\r\n    random_forest: \"\",\r\n    naive_bayes: \"\",\r\n  });\r\n\r\n  const fetchData = async (address) => {\r\n    try {\r\n      const dataArray = await contract.display(address || account);\r\n      const isEmpty = Object.keys(dataArray).length === 0;\r\n\r\n      if (!isEmpty) {\r\n        const str = dataArray.toString();\r\n        const str_array = str.split(\",\");\r\n        const images = str_array.map((item, i) => {\r\n          return (\r\n            <a href={item} key={i} target=\"_blank\" rel=\"noreferrer\">\r\n              <img\r\n                key={i}\r\n                src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\r\n                alt=\"Patient Health Record\"\r\n                className=\"image-list\"\r\n              ></img>\r\n              <span className=\"record-text\">Patient Health Record</span>\r\n            </a>\r\n          );\r\n        });\r\n\r\n        setData(images);\r\n      } else {\r\n        alert(\"No Record to display\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Error: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const getDiseasePredictions = async (address) => {\r\n    try {\r\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(address || account);\r\n      setDiseasePredictions({\r\n        decision_tree,\r\n        random_forest,\r\n        naive_bayes,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Error fetching disease predictions: \" + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDiseasePredictsions(); // Fetch disease predictions when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <input type=\"text\" placeholder=\"Enter Address\" className=\"address\" />\r\n      <br /><br />\r\n      <button className=\"center button\" onClick={() => fetchData(document.querySelector(\".address\").value)}>\r\n        Get Patient Record\r\n      </button>\r\n      <div className=\"image-list\">{data}</div>\r\n\r\n      {/* Display disease predictions */}\r\n      <div className=\"disease-predictions\">\r\n        <h2>Disease Predictions</h2>\r\n        <p>Decision Tree: {diseasePredictions.decision_tree}</p>\r\n        <p>Random Forest: {diseasePredictions.random_forest}</p>\r\n        <p>Naive Bayes: {diseasePredictions.naive_bayes}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}