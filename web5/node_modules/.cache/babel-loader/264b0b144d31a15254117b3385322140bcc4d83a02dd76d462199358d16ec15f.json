{"ast":null,"code":"var _jsxFileName = \"/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./Display.css\";\nimport useAddressInput from './useAddressInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState(\"\");\n  const {\n    query,\n    handleInputChange,\n    suggestions,\n    selectedOption,\n    handleOptionClick\n  } = useAddressInput(contract);\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\"\n  });\n  const address = query;\n  const fetchData = async address => {\n    try {\n      const dataArray = await contract.display(address || account);\n      const isEmpty = dataArray.length === 0;\n      if (!isEmpty) {\n        const str = dataArray.join(\",\");\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"a\", {\n            href: item,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`,\n              alt: \"Patient Health Record\",\n              className: \"image-list\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 15\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this);\n        });\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n  const getDiseasePredictions = async address => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(address || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n  useEffect(() => {\n    if (query) {\n      fetchData(query);\n      getDiseasePredictions(query);\n    }\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"account-dropdown\",\n      value: query,\n      onChange: handleInputChange,\n      placeholder: \"Enter Account Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), query && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions-list\",\n      children: suggestions.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleOptionClick(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: () => fetchData(query),\n      children: \"Get Patient Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: () => getDiseasePredictions(query),\n      children: \"Get Disease Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"disease-predictions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Disease Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Decision Tree: \", diseasePredictions.decision_tree]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Random Forest: \", diseasePredictions.random_forest]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Naive Bayes: \", diseasePredictions.naive_bayes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"ziYkWcUA/OYnW7pUjS25iVXRgp0=\", false, function () {\n  return [useAddressInput];\n});\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","useEffect","useAddressInput","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","query","handleInputChange","suggestions","selectedOption","handleOptionClick","diseasePredictions","setDiseasePredictions","decision_tree","random_forest","naive_bayes","address","fetchData","dataArray","display","isEmpty","length","str","join","str_array","split","images","map","item","i","href","target","rel","children","src","substring","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","alert","error","console","message","getDiseasePredictions","type","value","onChange","placeholder","option","index","onClick","_c","$RefreshReg$"],"sources":["/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./Display.css\";\nimport useAddressInput from './useAddressInput';\n\nconst Display = ({ contract, account }) => {\n  const [data, setData] = useState(\"\");\n  const { query, handleInputChange, suggestions, selectedOption, handleOptionClick } = useAddressInput(contract);\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\",\n  });\n  const address = query;\n\n  const fetchData = async (address) => {\n    try {\n      const dataArray = await contract.display(address || account);\n      const isEmpty = dataArray.length === 0;\n\n      if (!isEmpty) {\n        const str = dataArray.join(\",\");\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return (\n            <a href={item} key={i} target=\"_blank\" rel=\"noreferrer\">\n              <img\n                key={i}\n                src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n                alt=\"Patient Health Record\"\n                className=\"image-list\"\n              ></img>\n             \n            </a>\n          );\n        });\n\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n\n  const getDiseasePredictions = async (address) => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(address || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes,\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (query) {\n      fetchData(query);\n      getDiseasePredictions(query);\n    }\n  }, [query]);\n\n\n\n  return (\n    <>\n      <input\n              type=\"text\"\n              className=\"account-dropdown\"\n              value={query}\n              onChange={handleInputChange}\n              placeholder=\"Enter Account Name\"\n            />\n            {/* Display account number suggestions */}\n            {query && (\n              <ul className=\"suggestions-list\">\n                {suggestions.map((option, index) => (\n                  <li key={index} onClick={() => handleOptionClick(option)}>\n                    {option}\n                  </li>\n                ))}\n              </ul>\n            )}\n      <br />\n      <br />\n      <button className=\"center button\" onClick={() => fetchData(query)}>\n  Get Patient Record\n</button>\n<button className=\"center button\" onClick={() => getDiseasePredictions(query)}>\n  Get Disease Predictions\n</button>\n\n      <div className=\"image-list\">{data}</div>\n      {/* Display disease predictions */}\n      <div className=\"disease-predictions\">\n        <h2>Disease Predictions</h2>\n        <p>Decision Tree: {diseasePredictions.decision_tree}</p>\n        <p>Random Forest: {diseasePredictions.random_forest}</p>\n        <p>Naive Bayes: {diseasePredictions.naive_bayes}</p>\n      </div>\n    </>\n  );\n};\n\nexport default Display;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}