{"ast":null,"code":"var _jsxFileName = \"/Users/tiryagishprayad/Pictures/finalproject/web5/src/App.js\",\n  _s = $RefreshSig$();\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Upload from \"./artifacts/contracts/Upload.sol/Upload.json\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/header\";\nimport Feedback from \"./components/Feedback\";\nimport \"./App.css\";\nimport Disease from \"./components/dise\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [uploadedRecords, setUploadedRecords] = useState([]);\n  const [userName, setUserName] = useState(\"\");\n  const [isNameSet, setIsNameSet] = useState(false);\n  useEffect(() => {\n    const loadProvider = async () => {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        if (provider) {\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          window.ethereum.on(\"accountsChanged\", () => {\n            window.location.reload();\n          });\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n          const contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n          const contract = new ethers.Contract(contractAddress, Upload.abi, signer);\n          setContract(contract);\n          setProvider(provider);\n          fetchUploadedRecords(contract, address);\n          const name = await contract.getName(address);\n          if (name) {\n            setUserName(name);\n            setIsNameSet(true);\n          }\n        } else {\n          console.error(\"Metamask is not installed\");\n        }\n      } catch (error) {\n        console.error(\"Error loading provider:\", error);\n      }\n    };\n    loadProvider();\n  }, []);\n  const fetchUploadedRecords = async (contract, address) => {\n    try {\n      const records = await contract.display(address);\n      setUploadedRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching uploaded records:\", error);\n    }\n  };\n\n  // const sendParametersToPython = async (a, b) => {\n  //   try {\n  //     const response = await axios.post('http://localhost:5001/', {\n  //       a: a,\n  //       b: b,\n  //     });\n\n  //     if (response.status === 200) {\n  //       const data = response.data;\n  //       setResultFromPython(data.result);\n  //       return data.result;\n  //     } else {\n  //       console.error('Network response was not ok');\n  //       return null;\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //     return null;\n  //   }\n  // };\n\n  // const setPythonResultOnContract = async (result) => {\n  //   try {\n  //     const signer = provider.getSigner();\n  //     const contractWithSigner = contract.connect(signer);\n  //     const tx = await contractWithSigner.setPythonResult(result);\n  //     await tx.wait();\n  //     console.log(\"Python result stored on the smart contract\");\n  //   } catch (error) {\n  //     console.error(\"Error setting Python result:\", error);\n  //   }\n  // };\n\n  // const handleSubmit = async () => {\n  //   const a = parseFloat(inputA);\n  //   const b = parseFloat(inputB);\n\n  //   if (!isNaN(a) && !isNaN(b)) {\n  //     try {\n\n  //       const pythonResult = await sendParametersToPython(a, b);\n\n  //       if (pythonResult !== null) {\n\n  //         setResultFromPython(pythonResult);\n\n  //         await setPythonResultOnContract(pythonResult);\n  //       }\n  //     } catch (error) {\n  //       console.error(\"Error sending parameters to Python:\", error);\n  //     }\n  //   } else {\n  //     console.error(\"Invalid input for 'a' and/or 'b'\");\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [!modalOpen && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"share\",\n      onClick: () => setModalOpen(true),\n      children: \"Share\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      setModalOpen: setModalOpen,\n      contract: contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Username: \", userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Account Address: \", account]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), !isNameSet ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Your Name\",\n            value: userName,\n            onChange: e => setUserName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              contract.setName(userName);\n              setIsNameSet(true); // Set isNameSet to true after setting the name\n            },\n            children: \"Set Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this) : null\n        // The following code is commented out correctly\n        /* <div className=\"resultFromPython\">\n          Result from Python: {resultFromPython}\n        </div>\n        <div className=\"inputFields\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter 'a'\"\n            value={inputA}\n            onChange={(e) => setInputA(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Enter 'b'\"\n            value={inputB}\n            onChange={(e) => setInputB(e.target.value)}\n          />\n          <button onClick={handleSubmit}>Submit</button>\n        </div> */]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Lw05/ONAM4nGUsrs8x9AAT90aOE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BrowserRouter","Router","Route","Routes","Upload","useState","useEffect","ethers","FileUpload","Display","Modal","Header","Feedback","Disease","jsxDEV","_jsxDEV","App","_s","account","setAccount","contract","setContract","provider","setProvider","modalOpen","setModalOpen","uploadedRecords","setUploadedRecords","userName","setUserName","isNameSet","setIsNameSet","loadProvider","providers","Web3Provider","window","ethereum","on","location","reload","send","signer","getSigner","address","getAddress","contractAddress","Contract","abi","fetchUploadedRecords","name","getName","console","error","records","display","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","setName","_c","$RefreshReg$"],"sources":["/Users/tiryagishprayad/Pictures/finalproject/web5/src/App.js"],"sourcesContent":["import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Upload from \"./artifacts/contracts/Upload.sol/Upload.json\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport FileUpload from \"./components/FileUpload\";\nimport Display from \"./components/Display\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/header\";\nimport Feedback from \"./components/Feedback\";\nimport \"./App.css\";\nimport Disease from \"./components/dise\";\n\nfunction App() {\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [uploadedRecords, setUploadedRecords] = useState([]);\n  const [userName, setUserName] = useState(\"\");           \n  const [isNameSet, setIsNameSet] = useState(false); \n\n \n\n  useEffect(() => {\n    const loadProvider = async () => {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        if (provider) {\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n\n          window.ethereum.on(\"accountsChanged\", () => {\n            window.location.reload();\n          });\n\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n          const contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n          const contract = new ethers.Contract(\n            contractAddress,\n            Upload.abi,\n            signer\n          );\n          setContract(contract);\n          setProvider(provider);\n          fetchUploadedRecords(contract, address);\n          const name = await contract.getName(address);\n          if (name) {\n            setUserName(name);\n            setIsNameSet(true); \n          }\n        } else {\n          console.error(\"Metamask is not installed\");\n        }\n      } catch (error) {\n        console.error(\"Error loading provider:\", error);\n      }\n    };\n\n    loadProvider();\n  }, []);\n\n  const fetchUploadedRecords = async (contract, address) => {\n    try {\n      const records = await contract.display(address);\n      setUploadedRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching uploaded records:\", error);\n    }\n  };\n\n  // const sendParametersToPython = async (a, b) => {\n  //   try {\n  //     const response = await axios.post('http://localhost:5001/', {\n  //       a: a,\n  //       b: b,\n  //     });\n\n  //     if (response.status === 200) {\n  //       const data = response.data;\n  //       setResultFromPython(data.result);\n  //       return data.result;\n  //     } else {\n  //       console.error('Network response was not ok');\n  //       return null;\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //     return null;\n  //   }\n  // };\n\n  // const setPythonResultOnContract = async (result) => {\n  //   try {\n  //     const signer = provider.getSigner();\n  //     const contractWithSigner = contract.connect(signer);\n  //     const tx = await contractWithSigner.setPythonResult(result);\n  //     await tx.wait();\n  //     console.log(\"Python result stored on the smart contract\");\n  //   } catch (error) {\n  //     console.error(\"Error setting Python result:\", error);\n  //   }\n  // };\n\n  // const handleSubmit = async () => {\n  //   const a = parseFloat(inputA);\n  //   const b = parseFloat(inputB);\n\n  //   if (!isNaN(a) && !isNaN(b)) {\n  //     try {\n        \n  //       const pythonResult = await sendParametersToPython(a, b);\n\n  //       if (pythonResult !== null) {\n          \n  //         setResultFromPython(pythonResult);\n\n         \n  //         await setPythonResultOnContract(pythonResult);\n  //       }\n  //     } catch (error) {\n  //       console.error(\"Error sending parameters to Python:\", error);\n  //     }\n  //   } else {\n  //     console.error(\"Invalid input for 'a' and/or 'b'\");\n  //   }\n  // };\n\n  return (\n    <Router>\n      {!modalOpen && (\n        <button className=\"share\" onClick={() => setModalOpen(true)}>\n          Share\n        </button>\n      )}\n      {modalOpen && <Modal setModalOpen={setModalOpen} contract={contract} />}\n\n      <div className=\"App\">\n        <Header />\n        {/* Display the username and account address */}\n        <div>\n          <span>Username: {userName}</span>\n          <span>Account Address: {account}</span>\n          {!isNameSet ? (\n            <div>\n              <input\n                type=\"text\"\n                placeholder=\"Your Name\"\n                value={userName}\n                onChange={(e) => setUserName(e.target.value)}\n              />\n              <button onClick={() => {\n                contract.setName(userName);\n                setIsNameSet(true); // Set isNameSet to true after setting the name\n              }}>\n                Set Name\n              </button>\n            </div>\n          ):null\n            // The following code is commented out correctly\n            /* <div className=\"resultFromPython\">\n              Result from Python: {resultFromPython}\n            </div>\n            <div className=\"inputFields\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter 'a'\"\n                value={inputA}\n                onChange={(e) => setInputA(e.target.value)}\n              />\n              <input\n                type=\"text\"\n                placeholder=\"Enter 'b'\"\n                value={inputB}\n                onChange={(e) => setInputB(e.target.value)}\n              />\n              <button onClick={handleSubmit}>Submit</button>\n            </div> */\n          }\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}