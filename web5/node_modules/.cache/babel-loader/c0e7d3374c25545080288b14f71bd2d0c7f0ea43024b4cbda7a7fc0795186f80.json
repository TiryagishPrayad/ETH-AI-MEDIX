{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tiryagishprayad/Pictures/finalproject/web5/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/tiryagishprayad/Pictures/finalproject/web5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/tiryagishprayad/Pictures/finalproject/web5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";import\"./Display.css\";import useAddressInput from'./useAddressInput';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Display=function Display(_ref){var contract=_ref.contract,account=_ref.account;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useAddressInput=useAddressInput(contract),query=_useAddressInput.query,handleInputChange=_useAddressInput.handleInputChange,suggestions=_useAddressInput.suggestions,handleOptionClick=_useAddressInput.handleOptionClick;var _useState3=useState({decision_tree:\"\",random_forest:\"\",naive_bayes:\"\"}),_useState4=_slicedToArray(_useState3,2),diseasePredictions=_useState4[0],setDiseasePredictions=_useState4[1];var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(query){var dataArray,isEmpty,str,str_array,images;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return contract.display(query||account);case 3:dataArray=_context.sent;isEmpty=dataArray.length===0;if(!isEmpty){str=dataArray.join(\",\");str_array=str.split(\",\");images=str_array.map(function(item,i){return/*#__PURE__*/_jsx(\"a\",{href:item,target:\"_blank\",rel:\"noreferrer\",children:/*#__PURE__*/_jsx(\"img\",{src:\"https://gateway.pinata.cloud/ipfs/\".concat(item.substring(6)),alt:\"Patient Health Record\",className:\"image-list\"},i)},i);});setData(images);}else{alert(\"No Record to display\");}_context.next=12;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.error(_context.t0);alert(\"Error: \"+_context.t0.message);case 12:case\"end\":return _context.stop();}},_callee,null,[[0,8]]);}));return function fetchData(_x){return _ref2.apply(this,arguments);};}();var getDiseasePredictions=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(query){var _yield$contract$getDi,_yield$contract$getDi2,decision_tree,random_forest,naive_bayes;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return contract.getDiseasePredictions(query||account);case 3:_yield$contract$getDi=_context2.sent;_yield$contract$getDi2=_slicedToArray(_yield$contract$getDi,3);decision_tree=_yield$contract$getDi2[0];random_forest=_yield$contract$getDi2[1];naive_bayes=_yield$contract$getDi2[2];setDiseasePredictions({decision_tree:decision_tree,random_forest:random_forest,naive_bayes:naive_bayes});_context2.next=15;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](0);console.error(_context2.t0);alert(\"Error fetching disease predictions: \"+_context2.t0.message);case 15:case\"end\":return _context2.stop();}},_callee2,null,[[0,11]]);}));return function getDiseasePredictions(_x2){return _ref3.apply(this,arguments);};}();// useEffect(() => {\n//   if (query) {\n//     fetchData(query);\n//     getDiseasePredictions(query);\n//   }\n// }, [query]);\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"account-dropdown\",value:query,onChange:handleInputChange,placeholder:\"Enter Account Name\"}),query&&/*#__PURE__*/_jsx(\"ul\",{className:\"suggestions-list\",children:suggestions.map(function(option,index){return/*#__PURE__*/_jsx(\"li\",{onClick:function onClick(){return handleOptionClick(option);},children:option},index);})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{className:\"center button\",onClick:function onClick(){return fetchData(query);},children:\"Get Patient Record\"}),/*#__PURE__*/_jsx(\"button\",{className:\"center button\",onClick:function onClick(){return getDiseasePredictions(query);},children:\"Get Disease Predictions\"}),/*#__PURE__*/_jsx(\"div\",{className:\"image-list\",children:data}),/*#__PURE__*/_jsxs(\"div\",{className:\"disease-predictions\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Disease Predictions\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Decision Tree: \",diseasePredictions.decision_tree]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Random Forest: \",diseasePredictions.random_forest]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Naive Bayes: \",diseasePredictions.naive_bayes]})]})]});};export default Display;","map":{"version":3,"names":["useState","useEffect","useAddressInput","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Display","_ref","contract","account","_useState","_useState2","_slicedToArray","data","setData","_useAddressInput","query","handleInputChange","suggestions","handleOptionClick","_useState3","decision_tree","random_forest","naive_bayes","_useState4","diseasePredictions","setDiseasePredictions","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dataArray","isEmpty","str","str_array","images","wrap","_callee$","_context","prev","next","display","sent","length","join","split","map","item","i","href","target","rel","children","src","concat","substring","alt","className","alert","t0","console","error","message","stop","_x","apply","arguments","getDiseasePredictions","_ref3","_callee2","_yield$contract$getDi","_yield$contract$getDi2","_callee2$","_context2","_x2","type","value","onChange","placeholder","option","index","onClick"],"sources":["/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./Display.css\";\nimport useAddressInput from './useAddressInput';\n\nconst Display = ({ contract, account }) => {\n  const [data, setData] = useState(\"\");\n  const { query, handleInputChange, suggestions, handleOptionClick } = useAddressInput(contract);\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\",\n  });\n\n  const fetchData = async (query) => {\n    try {\n      const dataArray = await contract.display(query || account);\n      const isEmpty = dataArray.length === 0;\n\n      if (!isEmpty) {\n        const str = dataArray.join(\",\");\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return (\n            <a href={item} key={i} target=\"_blank\" rel=\"noreferrer\">\n              <img\n                key={i}\n                src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n                alt=\"Patient Health Record\"\n                className=\"image-list\"\n              ></img>\n            </a>\n          );\n        });\n\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n\n  const getDiseasePredictions = async (query) => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(query || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes,\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   if (query) {\n  //     fetchData(query);\n  //     getDiseasePredictions(query);\n  //   }\n  // }, [query]);\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        className=\"account-dropdown\"\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Enter Account Name\"\n      />\n      {/* Display account number suggestions */}\n      {query && (\n        <ul className=\"suggestions-list\">\n          {suggestions.map((option, index) => (\n            <li key={index} onClick={() => handleOptionClick(option)}>\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n      <br />\n      <br />\n      <button className=\"center button\" onClick={() => fetchData(query)}>\n        Get Patient Record\n      </button>\n      <button className=\"center button\" onClick={() => getDiseasePredictions(query)}>\n        Get Disease Predictions\n      </button>\n\n      <div className=\"image-list\">{data}</div>\n      {/* Display disease predictions */}\n      <div className=\"disease-predictions\">\n        <h2>Disease Predictions</h2>\n        <p>Decision Tree: {diseasePredictions.decision_tree}</p>\n        <p>Random Forest: {diseasePredictions.random_forest}</p>\n        <p>Naive Bayes: {diseasePredictions.naive_bayes}</p>\n        \n      </div>\n    </>\n  );\n};\n\nexport default Display;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}