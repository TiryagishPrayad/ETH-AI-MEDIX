{"ast":null,"code":"var _jsxFileName = \"/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./Display .css\";\nimport useAddressInput from './useAddressInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = ({\n  contract,\n  account\n}) => {\n  _s();\n  const [data, setData] = useState(\"\");\n  const {\n    query,\n    handleInputChange,\n    suggestions,\n    handleOptionClick\n  } = useAddressInput(contract);\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\"\n  });\n  const fetchData = async query => {\n    try {\n      const dataArray = await contract.display(query || account);\n      const isEmpty = dataArray.length === 0;\n      if (!isEmpty) {\n        const str = dataArray.join(\",\");\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"a\", {\n            href: item,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://gateway.pinata.cloud/ipfs/${item.substring(6)}`,\n              alt: \"Patient Health Record\",\n              className: \"image-list\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 15\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this);\n        });\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n  const getDiseasePredictions = async query => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(query || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   if (query) {\n  //     fetchData(query);\n  //     getDiseasePredictions(query);\n  //   }\n  // }, [query]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"account-dropdown\",\n      value: query,\n      onChange: handleInputChange,\n      placeholder: \"Enter Account Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), query && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions-list\",\n      children: suggestions.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleOptionClick(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: () => fetchData(query),\n      children: \"Get Patient Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: () => getDiseasePredictions(query),\n      children: \"Get Disease Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"disease-predictions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Disease Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Decision Tree: \", diseasePredictions.decision_tree]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Random Forest: \", diseasePredictions.random_forest]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Naive Bayes: \", diseasePredictions.naive_bayes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"pnkrYGFd6pw9mcu9lHjJcNlzTvs=\", false, function () {\n  return [useAddressInput];\n});\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","useEffect","useAddressInput","jsxDEV","_jsxDEV","Fragment","_Fragment","Display","contract","account","_s","data","setData","query","handleInputChange","suggestions","handleOptionClick","diseasePredictions","setDiseasePredictions","decision_tree","random_forest","naive_bayes","fetchData","dataArray","display","isEmpty","length","str","join","str_array","split","images","map","item","i","href","target","rel","children","src","substring","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","alert","error","console","message","getDiseasePredictions","type","value","onChange","placeholder","option","index","onClick","_c","$RefreshReg$"],"sources":["/Users/tiryagishprayad/Pictures/finalproject/web5/src/components/Display.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./Display .css\";\nimport useAddressInput from './useAddressInput';\n\nconst Display = ({ contract, account }) => {\n  const [data, setData] = useState(\"\");\n  const { query, handleInputChange, suggestions, handleOptionClick } = useAddressInput(contract);\n  const [diseasePredictions, setDiseasePredictions] = useState({\n    decision_tree: \"\",\n    random_forest: \"\",\n    naive_bayes: \"\",\n  });\n\n  const fetchData = async (query) => {\n    try {\n      const dataArray = await contract.display(query || account);\n      const isEmpty = dataArray.length === 0;\n\n      if (!isEmpty) {\n        const str = dataArray.join(\",\");\n        const str_array = str.split(\",\");\n        const images = str_array.map((item, i) => {\n          return (\n            <a href={item} key={i} target=\"_blank\" rel=\"noreferrer\">\n              <img\n                key={i}\n                src={`https://gateway.pinata.cloud/ipfs/${item.substring(6)}`}\n                alt=\"Patient Health Record\"\n                className=\"image-list\"\n              ></img>\n            </a>\n          );\n        });\n\n        setData(images);\n      } else {\n        alert(\"No Record to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Error: \" + error.message);\n    }\n  };\n\n  const getDiseasePredictions = async (query) => {\n    try {\n      const [decision_tree, random_forest, naive_bayes] = await contract.getDiseasePredictions(query || account);\n      setDiseasePredictions({\n        decision_tree,\n        random_forest,\n        naive_bayes,\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Error fetching disease predictions: \" + error.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   if (query) {\n  //     fetchData(query);\n  //     getDiseasePredictions(query);\n  //   }\n  // }, [query]);\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        className=\"account-dropdown\"\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Enter Account Name\"\n      />\n      {/* Display account number suggestions */}\n      {query && (\n        <ul className=\"suggestions-list\">\n          {suggestions.map((option, index) => (\n            <li key={index} onClick={() => handleOptionClick(option)}>\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n      <br />\n      <br />\n      <button className=\"center button\" onClick={() => fetchData(query)}>\n        Get Patient Record\n      </button>\n      <button className=\"center button\" onClick={() => getDiseasePredictions(query)}>\n        Get Disease Predictions\n      </button>\n\n      <div className=\"image-list\">{data}</div>\n      {/* Display disease predictions */}\n      <div className=\"disease-predictions\">\n        <h2>Disease Predictions</h2>\n        <p>Decision Tree: {diseasePredictions.decision_tree}</p>\n        <p>Random Forest: {diseasePredictions.random_forest}</p>\n        <p>Naive Bayes: {diseasePredictions.naive_bayes}</p>\n        \n      </div>\n    </>\n  );\n};\n\nexport default Display;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}